/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardIndexRouteImport } from './routes/dashboard.index'
import { Route as DashboardPostsRouteImport } from './routes/dashboard.posts'
import { Route as DashboardUsersIndexRouteImport } from './routes/dashboard.users.index'
import { Route as DashboardSettingsIndexRouteImport } from './routes/dashboard.settings.index'
import { Route as DashboardPostsIndexRouteImport } from './routes/dashboard.posts.index'
import { Route as DashboardPostsCreateRouteImport } from './routes/dashboard.posts.create'
import { Route as DashboardPostsPostIdRouteImport } from './routes/dashboard.posts.$postId'
import { Route as DashboardPostsPostIdIndexRouteImport } from './routes/dashboard.posts.$postId.index'

const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardIndexRoute = DashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardPostsRoute = DashboardPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardUsersIndexRoute = DashboardUsersIndexRouteImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardSettingsIndexRoute = DashboardSettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardPostsIndexRoute = DashboardPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardPostsRoute,
} as any)
const DashboardPostsCreateRoute = DashboardPostsCreateRouteImport.update({
  id: '/create',
  path: '/create',
  getParentRoute: () => DashboardPostsRoute,
} as any)
const DashboardPostsPostIdRoute = DashboardPostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => DashboardPostsRoute,
} as any)
const DashboardPostsPostIdIndexRoute =
  DashboardPostsPostIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => DashboardPostsPostIdRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/posts': typeof DashboardPostsRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/posts/$postId': typeof DashboardPostsPostIdRouteWithChildren
  '/dashboard/posts/create': typeof DashboardPostsCreateRoute
  '/dashboard/posts/': typeof DashboardPostsIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
  '/dashboard/posts/$postId/': typeof DashboardPostsPostIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardIndexRoute
  '/dashboard/posts/create': typeof DashboardPostsCreateRoute
  '/dashboard/posts': typeof DashboardPostsIndexRoute
  '/dashboard/settings': typeof DashboardSettingsIndexRoute
  '/dashboard/users': typeof DashboardUsersIndexRoute
  '/dashboard/posts/$postId': typeof DashboardPostsPostIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/posts': typeof DashboardPostsRouteWithChildren
  '/dashboard/': typeof DashboardIndexRoute
  '/dashboard/posts/$postId': typeof DashboardPostsPostIdRouteWithChildren
  '/dashboard/posts/create': typeof DashboardPostsCreateRoute
  '/dashboard/posts/': typeof DashboardPostsIndexRoute
  '/dashboard/settings/': typeof DashboardSettingsIndexRoute
  '/dashboard/users/': typeof DashboardUsersIndexRoute
  '/dashboard/posts/$postId/': typeof DashboardPostsPostIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/posts'
    | '/dashboard/'
    | '/dashboard/posts/$postId'
    | '/dashboard/posts/create'
    | '/dashboard/posts/'
    | '/dashboard/settings'
    | '/dashboard/users'
    | '/dashboard/posts/$postId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/posts/create'
    | '/dashboard/posts'
    | '/dashboard/settings'
    | '/dashboard/users'
    | '/dashboard/posts/$postId'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/posts'
    | '/dashboard/'
    | '/dashboard/posts/$postId'
    | '/dashboard/posts/create'
    | '/dashboard/posts/'
    | '/dashboard/settings/'
    | '/dashboard/users/'
    | '/dashboard/posts/$postId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/posts': {
      id: '/dashboard/posts'
      path: '/posts'
      fullPath: '/dashboard/posts'
      preLoaderRoute: typeof DashboardPostsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/users/': {
      id: '/dashboard/users/'
      path: '/users'
      fullPath: '/dashboard/users'
      preLoaderRoute: typeof DashboardUsersIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/settings/': {
      id: '/dashboard/settings/'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/posts/': {
      id: '/dashboard/posts/'
      path: '/'
      fullPath: '/dashboard/posts/'
      preLoaderRoute: typeof DashboardPostsIndexRouteImport
      parentRoute: typeof DashboardPostsRoute
    }
    '/dashboard/posts/create': {
      id: '/dashboard/posts/create'
      path: '/create'
      fullPath: '/dashboard/posts/create'
      preLoaderRoute: typeof DashboardPostsCreateRouteImport
      parentRoute: typeof DashboardPostsRoute
    }
    '/dashboard/posts/$postId': {
      id: '/dashboard/posts/$postId'
      path: '/$postId'
      fullPath: '/dashboard/posts/$postId'
      preLoaderRoute: typeof DashboardPostsPostIdRouteImport
      parentRoute: typeof DashboardPostsRoute
    }
    '/dashboard/posts/$postId/': {
      id: '/dashboard/posts/$postId/'
      path: '/'
      fullPath: '/dashboard/posts/$postId/'
      preLoaderRoute: typeof DashboardPostsPostIdIndexRouteImport
      parentRoute: typeof DashboardPostsPostIdRoute
    }
  }
}

interface DashboardPostsPostIdRouteChildren {
  DashboardPostsPostIdIndexRoute: typeof DashboardPostsPostIdIndexRoute
}

const DashboardPostsPostIdRouteChildren: DashboardPostsPostIdRouteChildren = {
  DashboardPostsPostIdIndexRoute: DashboardPostsPostIdIndexRoute,
}

const DashboardPostsPostIdRouteWithChildren =
  DashboardPostsPostIdRoute._addFileChildren(DashboardPostsPostIdRouteChildren)

interface DashboardPostsRouteChildren {
  DashboardPostsPostIdRoute: typeof DashboardPostsPostIdRouteWithChildren
  DashboardPostsCreateRoute: typeof DashboardPostsCreateRoute
  DashboardPostsIndexRoute: typeof DashboardPostsIndexRoute
}

const DashboardPostsRouteChildren: DashboardPostsRouteChildren = {
  DashboardPostsPostIdRoute: DashboardPostsPostIdRouteWithChildren,
  DashboardPostsCreateRoute: DashboardPostsCreateRoute,
  DashboardPostsIndexRoute: DashboardPostsIndexRoute,
}

const DashboardPostsRouteWithChildren = DashboardPostsRoute._addFileChildren(
  DashboardPostsRouteChildren,
)

interface DashboardRouteChildren {
  DashboardPostsRoute: typeof DashboardPostsRouteWithChildren
  DashboardIndexRoute: typeof DashboardIndexRoute
  DashboardSettingsIndexRoute: typeof DashboardSettingsIndexRoute
  DashboardUsersIndexRoute: typeof DashboardUsersIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardPostsRoute: DashboardPostsRouteWithChildren,
  DashboardIndexRoute: DashboardIndexRoute,
  DashboardSettingsIndexRoute: DashboardSettingsIndexRoute,
  DashboardUsersIndexRoute: DashboardUsersIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
